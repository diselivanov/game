// src/editor/PlatformEditor.ts
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Graphics, Container, Text, TextStyle, Rectangle } from "pixi.js";
import Matter from "matter-js";
import { Platform } from "../entities/Platform";

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫—É—Ä—Å–æ—Ä–æ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—à–∏–Ω—ã
 */
export class PlatformEditor {
  public container: Container;
  public graphics: Graphics;
  public vertices: Matter.Vector[] = [];
  public isEditing: boolean = false;
  public isClosed: boolean = false;

  private instructionsText: Text;
  private statusText: Text;
  private backgroundOverlay: Graphics;

  private lineColor: number = 0x00ff00; // –ó–µ–ª—ë–Ω—ã–π
  private lineThickness: number = 1;
  private fillAlpha: number = 0.1; // –°–∏–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

  constructor() {
    this.container = new Container();
    this.graphics = new Graphics();

    // –°–æ–∑–¥–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    this.backgroundOverlay = new Graphics();
    this.backgroundOverlay.beginFill(0x000000, 0.7);
    this.backgroundOverlay.drawRect(0, 0, 10000, 10000);
    this.backgroundOverlay.endFill();
    this.backgroundOverlay.zIndex = 9998;

    this.container.addChild(this.backgroundOverlay);
    this.container.addChild(this.graphics);

    this.setupInstructions();
    this.setupEventListeners();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π z-index –¥–ª—è –≤—Å–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    this.container.zIndex = 9999;
    this.graphics.zIndex = 10000;

    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.setVisible(false);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
   */
  private setupInstructions(): void {
    const textStyle = new TextStyle({
      fontFamily: "Arial",
      fontSize: 16,
      fill: "#ffffff",
      align: "left",
      lineHeight: 20,
    });

    // –ö–∞–∂–¥–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    this.instructionsText = new Text({
      text: "–õ–ö–ú: –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—à–∏–Ω—É\n–ü–ö–ú: –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\nR: —Å–±—Ä–æ—Å–∏—Ç—å",
      style: textStyle,
    });
    this.instructionsText.position.set(10, 10);
    this.instructionsText.zIndex = 10001;

    const statusStyle = new TextStyle({
      fontFamily: "Arial",
      fontSize: 15,
      fill: "#f3f3f3ff",
      align: "left",
    });

    this.statusText = new Text({
      text: "–û–∂–∏–¥–∞–Ω–∏–µ",
      style: statusStyle,
    });
    this.statusText.position.set(10, 90);
    this.statusText.zIndex = 10001;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const bgGraphics = new Graphics();
    bgGraphics.beginFill(0x000000, 0.6);
    bgGraphics.drawRoundedRect(5, 5, 250, 120, 0);
    bgGraphics.endFill();
    bgGraphics.zIndex = 10000;

    this.container.addChild(bgGraphics);
    this.container.addChild(this.instructionsText);
    this.container.addChild(this.statusText);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    this.container.eventMode = "static";
    this.container.hitArea = new Rectangle(0, 0, 10000, 10000);
  }

  /**
   * –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  startEditing(): void {
    this.isEditing = true;
    this.isClosed = false;
    this.vertices = [];
    this.updateStatus("–û–∂–∏–¥–∞–Ω–∏–µ");
    this.clearGraphics();
    this.setVisible(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  finishEditing(): void {
    this.updateStatus("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ");
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—à–∏–Ω—É
   */
  addVertex(x: number, y: number): void {
    if (!this.isEditing || this.isClosed) return;

    this.vertices.push({ x, y });
    this.drawVertices();
    this.updateStatus(`üìê –í–µ—Ä—à–∏–Ω: ${this.vertices.length}`);
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É (—Å–æ–µ–¥–∏–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—à–∏–Ω—ã) –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
   */
  closeShapeAndCopy(): void {
    if (this.vertices.length < 3) {
      this.updateStatus("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –≤–µ—Ä—à–∏–Ω—ã");
      return;
    }

    this.isClosed = true;
    this.drawVertices();

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—à–∏–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const verticesString = this.exportVerticesString(0, 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0,0 –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    navigator.clipboard
      .writeText(verticesString)
      .then(() => {
        this.updateStatus("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ");
        this.finishEditing();
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ", err);
        this.updateStatus("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ (–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)");
      });
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
   */
  reset(): void {
    this.vertices = [];
    this.isClosed = false;
    this.clearGraphics();
    this.updateStatus("üîÑ –§–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—à–∏–Ω –∏ –ª–∏–Ω–∏–π
   */
  private drawVertices(): void {
    this.clearGraphics();

    if (this.vertices.length === 0) return;

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∏–Ω–∏–π –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏
    this.graphics.lineStyle(this.lineThickness, this.lineColor, 1);
    this.graphics.moveTo(this.vertices[0].x, this.vertices[0].y);

    for (let i = 1; i < this.vertices.length; i++) {
      this.graphics.lineTo(this.vertices[i].x, this.vertices[i].y);
    }

    // –ó–∞–º—ã–∫–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.isClosed && this.vertices.length > 2) {
      this.graphics.lineTo(this.vertices[0].x, this.vertices[0].y);

      // –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ—Ä–º—ã
      this.graphics.beginFill(this.lineColor, this.fillAlpha);
      this.graphics.moveTo(this.vertices[0].x, this.vertices[0].y);
      for (let i = 1; i < this.vertices.length; i++) {
        this.graphics.lineTo(this.vertices[i].x, this.vertices[i].y);
      }
      this.graphics.lineTo(this.vertices[0].x, this.vertices[0].y);
      this.graphics.endFill();
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—à–∏–Ω:
    for (const vertex of this.vertices) {
      this.graphics.beginFill(this.lineColor, this.fillAlpha);
      this.graphics.drawRect(vertex.x - 1, vertex.y - 1, 2, 2);
      this.graphics.endFill();
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∏
   */
  private clearGraphics(): void {
    this.graphics.clear();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  private updateStatus(message: string): void {
    this.statusText.text = message;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
   */
  setVisible(visible: boolean): void {
    this.container.visible = visible;
    this.instructionsText.visible = visible;
    this.statusText.visible = visible;
    this.graphics.visible = visible;
    this.backgroundOverlay.visible = visible;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞)
   */
  getRelativeVertices(centerX: number, centerY: number): Matter.Vector[] {
    return this.vertices.map((vertex) => ({
      x: vertex.x - centerX,
      y: vertex.y - centerY,
    }));
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤–µ—Ä—à–∏–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  exportVerticesString(centerX: number, centerY: number): string {
    const relativeVertices = this.getRelativeVertices(centerX, centerY);
    const verticesString = relativeVertices
      .map((v) => `{ x: ${Math.round(v.x)}, y: ${Math.round(v.y)} }`)
      .join(",\n  ");

    return `[\n  ${verticesString}\n]`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
   */
  isValidShape(): boolean {
    return this.isClosed && this.vertices.length >= 3;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã
   */
  createPlatform(x: number, y: number, texture?: any): Platform {
    if (!this.isValidShape()) {
      throw new Error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞");
    }

    const relativeVertices = this.getRelativeVertices(x, y);
    return new Platform(x, y, 0, 0, texture, relativeVertices);
  }
}
